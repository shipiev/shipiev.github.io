---
layout: post
title: "Разработка плагинов для Redmine"
published: true
created: 1401947686
tags: [redmine, plugins, specificity, development]
categories: ["Redmine plugins"]
---
h1. Два пути разработки

Разработка плагинов для Redmine может идти по двум направлениям: как обособленное Rails-приложение с минимальным использованием инструментов Redmine или же как глубоко интегрированный плагин, который максимально использует возможности Redmine. У каждой из этих стратегий разработки есть свои достоинства и недостатки.

h2. Обособленное Rails-приложение

Начнем с того, что абсолютно обособить приложение от Redmine вряд ли удасться. Иначе не имело бы смысла делать именно плагин. Как минимум, надо обеспечить переход на приложение из Redmine, то есть без использования системы меню Redmine не обойтись. Плюс ко всему, скорее всего, придется использовать систему авторизации/аутентификации пользователей. Добавим сюда оформление, которое должно вписываться в текущую тему Redmine.

Не успевает разработчик опомниться, как начинает использовать всё новые и новые возможности Redmine. Но это мы уже забегем вперед. Давайте рассмотрим преимущества и недостатки данного подхода.

h3. Плюсы:

* *Низкий порог вхождения*. Любой Rails-разработчик может быстро освоить данный подход и начать разрабатывать плагины Redmine.
* *Свобода выбора*. Можно применять именно те инструменты, подходы и библиотеки к которым привык разработчик.

h3. Минусы:

* *Низкая скорость разработки*. Не смотря на то, что разработчик использует привычные инструменты, ему все равно приходится делать массу рутиной работы.
* *Плохое знание Redmine*. Если нет необходимости интегрироваться с Redmine, то и не за чем подробно изучать систему и используемые в ней подходы. Следствием будет, скорее всего, неправильное или непродуктивное использование возможностей системы.

h2. Глубоко интегрированый плагин

После того, как разработчик реализовал не один десяток плагинов, он начинает всё глубже интегрировать их в систему Redmine. Время потраченное на изучение системы окупается всё возрастающей скоростью разработки. Одновременно с этим приходят всяческие неудобства вроде недостаточной мощности инструментов Redmine. Вам, собственно, шашечки или ехать?

h3. Плюсы:

* *Высокая скорость разработки*. Надо реализовать загрузку файлов? Добавьте пару строчек! Нужен небольшой справочник? Реализуйте только модель для него! Организовать поиск? Запросто!
* *Хорошее знание Redmine*. Пытаясь сделать «так же, как и в Redmine» разработчик все дальше и дальше погружается в изучение принципов работы системы. Как результат, подобные разработчики становятся непревзойденными экспертами. Не редки случаи, когда они присоединяются к разработке Redmine.

h3. Минусы:

* *Высокий порог вхождения*. Для того, чтобы использовать возможности Redmine в собственных разработках необходимо потратить время и силы на их изучение.
* *Ограниченный выбор*. Если имеющиеся средства Redmine не отвечают требованиям разработчика, то ему придётся самостоятельно их дорабатывать. Приятным бонусом является то, что эти наработки можно отправить в сам Redmine и, таким образом, помочь процессу разработки системы.

h1. Стоит ли изобретать свой велосипед?

Безусловно стоит! Но исключительно как зарядку для ума. Скорее всего, задача, решаемая «велосипедом», уже встречалась не раз и имеет изящное решение. В промышленной разработке, как правило, на «велосипедостроительство» нет времени. Там используют уже имеющиеся и хорошо зарекомендовавшие себя решения, что продиктовано высокими требованиями к надежности, унификации и скорости разработки.

Начинающий разработчик плагинов Redmine будет использовать первую стратегию, но по мере профессионального роста переходить ко второй. При этом, нельзя точно сказать, что «вот теперь он точно использует вторую стратегию». Точно также, как нет предела совершенству, нет и предела глубине интеграции плагинов в Redmine.
